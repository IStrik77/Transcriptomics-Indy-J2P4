geom_point(position = position_jitter(0.5)) +
geom_smooth() +
expand_limits(y = c(0, 100)) +
labs( x = "tijd in uren" ,
y = "apoptose in %" ) +
facet_grid(cols = vars(cell_line))+
scale_color_manual(values = c("cyan", "yellow", "hotpink"))+
theme_classic() +
theme(axis.title = element_text(color = "purple" , size = 12))
#packages downloaden
library(phyloseq)
library(Biostrings)
library(ggplot2)
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/ps.rds")
ps
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
ps
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
ps
# Nu maak je van deze informatie een dataframe
samdf <- data.frame(Sample_ID = group, Treatment = replica)
rownames(samdf) <- sample_names
# Check nog even wat je gemaakt hebt
samdf
dna <- Biostrings::DNAStringSet(taxa_names(ps))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
ps <- merge_phyloseq(ps, dna)
ps
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps
sample_data(ps)
otu_table(ps)[1:5, 1:5]
head(tax_table(ps))
head(refseq(ps))
#alfadiversiteit
#observed species
plot_richness(ps, x = "Treatment", measures = "Observed", color = "Treatment" )
#Shannon-Wiener index
plot_richness(ps, x = "Treatment", measures = "Shannon", color = "Treatment" )
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = "Simpson", color = "Treatment" )
#alfadiversiteit
theme_pastel <- function() {
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
)
theme_pastel <- function() {
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold",
theme_pastel <- function() {
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
)
theme_pastel <- function() {
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
)
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
))
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = "Observed, Shannon", color = "Treatment" ) +
geom_boxplot() +
theme_pastel
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = "Observed, Shannon", color = "Treatment" ) +
geom_boxplot() +
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = "Observed, Shannon", color = "Treatment" ) +
geom_boxplot()
#alfadiversiteit
theme_pastel <- function() +
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
))
#alfadiversiteit
theme_pastel <- function() +
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
)
#observed species
plot_richness(ps, x = "Treatment", measures = "Observed", color = "Treatment" )
#Treatment bij de x
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
#Treatment bij de x
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
#observed species
plot_richness(ps, x = "Treatment", measures = "Observed", color = "Treatment" )
antibiotica <- "D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/Antibiotica_raw (2)/"
#kwaliteits controle
library(dada2)
antibiotica <- "D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/Antibiotica_raw (2)/"
list.files(antibiotica)
forward_reads <- list.files(antibiotica, pattern = "_1.fastq", full.names = TRUE)
forward_reads
reverse_reads <- list.files(antibiotica, pattern = "_2.fastq", full.names = TRUE)
reverse_reads
sample_names <- sapply(strsplit(basename(forward_reads), "_"), `[`, 1)
sample_names
filtF <- file.path(antibiotica, "filtered", paste0(sample_names, "_F_filt.fastq.gz"))
filtR <- file.path(antibiotica, "filtered", paste0(sample_names, "_R_filt.fastq.gz"))
names(filtF) <- sample_names
names(filtR) <- sample_names
out <- filterAndTrim(forward_reads, filtF, reverse_reads, filtR, truncLen=c(220,220), maxN=0, maxEE=c(2,2))
head(out)
saveRDS(filtF, "D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/filtF.rds")
saveRDS(filtR, "D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/filtR.rds")
saveRDS(out, "D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/out.rds")
saveRDS(sample_names, "D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/sample_names.rds")
filtF <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/filtF.rds")
filtR <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/filtR.rds")
out <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/out.rds")
sample_names <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/sample_names.rds")
# het bepalen van error rates , werkcollege 2
errF <- learnErrors(filtF, multithread=TRUE)
# het bepalen van error rates , werkcollege 2
errF <- learnErrors(filtF, multithread=TRUE)
# Je splitst op basis van - en pakt voor de groep het eerste stukje
group <- sapply(strsplit(sample_names, "-"), `[`, 1)
# Voor de replica's doe je hetzelfde, maar pak je het tweede stukje (achter de -)
replica <- sapply(strsplit(sample_names, "-"), `[`, 2)
# Nu maak je van deze informatie een dataframe
samdf <- data.frame(Sample_ID = group, Treatment = replica)
rownames(samdf) <- sample_names
# Check nog even wat je gemaakt hebt
samdf
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
ps
#werkcollege 3, alpha en beta diversiteit
#packages downloaden
library(phyloseq)
library(Biostrings)
library(ggplot2)
#Treatment bij de x
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
dna <- Biostrings::DNAStringSet(taxa_names(ps))
ps <- merge_phyloseq(ps, dna)
ps <- merge_phyloseq(ps, dna)
Biostrings::DNAStringSet(taxa_names(ps))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
ps <- merge_phyloseq(ps, dna)
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
ps
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
sample_data(ps)
otu_table(ps)[1:10, 1:10]
head(tax_table(ps))
head(refseq(ps))
#observed species
plot_richness(ps, x = "Treatment", measures = "Observed", color = "Treatment" )
#Shannon-Wiener index
plot_richness(ps, x = "Treatment", measures = "Shannon", color = "Treatment" )
# simpson
plot_richness(ps, x = "Treatment", measures = "Simpson", color = "Treatment" )
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed, Shannon"), color = "Treatment" ) +
geom_boxplot()
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot()
#Wilcoxon rank-sum test
rich <- estimate_richness(ps, measures = "Shannon")
rich
wilcox.observed <- pairwise.wilcox.test(rich$Shannon, sample_data(ps)$Treatment)
wilcox.observed
theme_pastel <- function() {
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
)
theme_pastel <- function()
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
)
)
+ theme_pastel <- function()
+     theme_minimal(base_size = 14) +
+         theme(
+             panel.background = element_rect(fill = "#f8f9fa", color = NA),
theme_pastel <- function() {
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f8f9fa", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
)
}
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot() +
theme_pastel()
#Wilcoxon rank-sum test
rich <- estimate_richness(ps, measures = "Shannon")
theme_neutraal <- function() {
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "#f4f4f4", color = NA),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.grid.major = element_line(color = "grey80", size = 0.3),
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey30"),
axis.title = element_text(face = "bold", color = "grey30"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16, color = "grey30")
)
}
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot() +
theme_neutraal()
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot(theme_pastel())
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot(aes (color = "pastel"))
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot(aes (color = "theme_pastel"))
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot()
#betadiversiteit
#proporties
sample_sums(ps)
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ps.prop
otu_table(ps)[1:5, 1:5]
otu_table(ps.prop)[1:5, 1:5]
# NMDS analyse
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS")
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
ord.nmds.bray
BiocManager::install('vegan')
library(vegan)
stressplot(ord.nmds.bray)
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
ord.nmds.bray
stressplot(ord.nmds.bray)
saveRDS(ps, "D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
ord.nmds.bray
# NMDS analyse
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS")
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
ord.nmds.bray
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse() +
scale_color_manual(values = c("case" = "#a3c4f3", "control" = "#f3a3d9"))
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse() +
scale_color_manual(values = c("case" = "#a3c4f3", "control" = "#f3a3d9"))
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse() +
scale_color_manual(values = c("case" = "#a3c4f3", "control" = "#f3a3d9"))
str(ps.prop)
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse() +
scale_color_manual(values = c("case" = "#a3c4f3", "control" = "#f3a3d9"))
filtF <- file.path(antibiotica, "filtered", paste0(sample_names, "_F_filt.fastq.gz"))
# gemiddelde kwaliteitsscore per locatie
plotQualityProfile(forward_reads[1:10])
plotQualityProfile(reverse_reads[1:10])
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
#Treatment bij de x
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
ord.nmds.bray
stressplot(ord.nmds.bray)
library(vegan)
stressplot(ord.nmds.bray)
ord.nmds.bray
#Wilcoxon rank-sum test
rich <- estimate_richness(ps, measures = "Shannon")
rich
wilcox.observed <- pairwise.wilcox.test(rich$Shannon, sample_data(ps)$Treatment)
# P < 0,05, sprake van statistisch significant verschil  --> mixD5 0.0079
wilcox.observed
ord.nmds.bray
#Treatment bij de x
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
Biostrings::DNAStringSet(taxa_names(ps))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
ps
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
sample_data(ps)
otu_table(ps)[1:10, 1:10]
head(tax_table(ps))
head(refseq(ps))
#observed species
plot_richness(ps, x = "Treatment", measures = "Observed", color = "Treatment" )
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot()
#Wilcoxon rank-sum test
rich <- estimate_richness(ps, measures = "Shannon")
rich
wilcox.observed <- pairwise.wilcox.test(rich$Shannon, sample_data(ps)$Treatment)
# P < 0,05, sprake van statistisch significant verschil  --> mixD5 0.0079
wilcox.observed
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot()
# meerdere indexen tegelijk
library(ggplot2)
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot()
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot(color = "pink")
setwd("C:/Users/indys/OneDrive - NHL Stenden/J2P4 innovatievediagnostiek//Transcriptomics/Casus/Transcriptomics-Indy-J2P4/")
# Voer analyse uit
dds <- DESeq(dds)
# Maak DESeqDataSet aan
dds <- DESeqDataSetFromMatrix(countData = round(countstest),
colData = treatment_table,
design = ~ treatment)
# Maak DESeqDataSet aan
dds <- DESeqDataSetFromMatrix(countData = round(countstest),
colData = treatment_table,
design = ~ treatment)
library(DESeq2)
library(KEGGREST)
# Maak DESeqDataSet aan
dds <- DESeqDataSetFromMatrix(countData = round(countstest),
colData = treatment_table,
design = ~ treatment)
# Maak DESeqDataSet aan
dds <- DESeqDataSetFromMatrix(countData = round(countstest),
colData = treatment_table,
design = ~ treatment)
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/ncbi_dataset (2)/ncbi_dataset/data/GCA_000001405.29/genomic.gtf",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
library(readr)
library(dplyr)
library(Rsamtools)
library(Rsubread)
allsamples <- c("ctrl19.BAM", "ctrl20.BAM", "ctrl28.BAM", "ctrl31.BAM", "RA79.BAM", "RA80.BAM", "RA86.BAM", "RA88.BAM")
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/ncbi_dataset (2)/ncbi_dataset/data/GCA_000001405.29/genomic.gtf",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
allsamples <- c("ctrl19.BAM", "ctrl20.BAM", "ctrl28.BAM", "ctrl31.BAM", "RA79.BAM", "RA80.BAM", "RA86.BAM", "RA88.BAM")
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/ncbi_dataset (2)/ncbi_dataset/data/GCA_000001405.29/genomic.gtf",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
countstest <- read.table("Ruwe Data/count_matrix.txt")
treatment <- c("control", "control", "control","control", "RA", "RA", "RA", "RA")
treatment_table <- data.frame(treatment)
rownames(treatment_table) <- c('SRR4785819', 'SRR4785820', 'SRR4785828', 'SRR4785831', 'SRR4785979', 'SRR4785980', 'SRR4785986', 'SRR4785988')
library(DESeq2)
library(KEGGREST)
# Maak DESeqDataSet aan
dds <- DESeqDataSetFromMatrix(countData = round(countstest),
colData = treatment_table,
design = ~ treatment)
# Voer analyse uit
dds <- DESeq(dds)
resultaten <- results(dds)
write.table(resultaten, file = 'ResultatenWC3.csv', row.names = TRUE, col.names = TRUE)
write.table(resultaten, file = 'ResultatenRA.csv', row.names = TRUE, col.names = TRUE)
write.table(resultaten, file = 'ResultatenRA.csv', row.names = TRUE, col.names = TRUE)
sum(resultaten$padj <
sum(resultaten$padj < 0.05 & resultaten$log2FoldChange < -1, na.rm = TRUE)
sum(resultatenRA$padj < 0.05 & resultatenRA$log2FoldChange > 1, na.rm = TRUE)
sum(resultaten$padj < 0.05 & resultaten$log2FoldChange > 1, na.rm = TRUE)
sum(resultaten$padj < 0.05 & resultaten$log2FoldChange < -1, na.rm = TRUE)
#bovenste is hoeveel genen meer in expressie en de onderste hoeveel genen minder expressie hebben
hoogste_fold_change <- resultaten[order(resultaten$log2FoldChange, decreasing = TRUE), ]
laagste_fold_change <- resultaten[order(resultaten$log2FoldChange, decreasing = FALSE), ]
laagste_p_waarde <- resultaten[order(resultaten$padj, decreasing = FALSE), ]
head(laagste_p_waarde)
if (!requireNamespace("EnhancedVolcano", quietly = TRUE)) {
BiocManager::install("EnhancedVolcano")
}
library(EnhancedVolcano)
EnhancedVolcano(resultaten,
lab = rownames(resultaten),
x = 'log2FoldChange',
y = 'padj')
# Alternatieve plot zonder p-waarde cutoff (alle genen zichtbaar)
EnhancedVolcano(resultaten,
lab = rownames(resultaten),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 0)
EnhancedVolcano(resultaten,
lab = rownames(resultaten),
x = 'log2FoldChange',
y = 'padj')
# Alternatieve plot zonder p-waarde cutoff (alle genen zichtbaar)
EnhancedVolcano(resultaten,
lab = rownames(resultaten),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 0)
dev.off()
