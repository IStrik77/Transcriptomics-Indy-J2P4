geom_boxplot()
#betadiversiteit
#proporties
sample_sums(ps)
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ps.prop
otu_table(ps)[1:5, 1:5]
otu_table(ps.prop)[1:5, 1:5]
# NMDS analyse
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS")
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
ord.nmds.bray
BiocManager::install('vegan')
library(vegan)
stressplot(ord.nmds.bray)
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
ord.nmds.bray
stressplot(ord.nmds.bray)
saveRDS(ps, "D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
ord.nmds.bray
# NMDS analyse
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS")
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
ord.nmds.bray
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse()
# NMDS figuur maken
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse() +
scale_color_manual(values = c("case" = "#a3c4f3", "control" = "#f3a3d9"))
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse() +
scale_color_manual(values = c("case" = "#a3c4f3", "control" = "#f3a3d9"))
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse() +
scale_color_manual(values = c("case" = "#a3c4f3", "control" = "#f3a3d9"))
str(ps.prop)
plot_ordination(ps.prop, ord.nmds.bray, color="case_control", title="Bray-Curtis NMDS") + stat_ellipse() +
scale_color_manual(values = c("case" = "#a3c4f3", "control" = "#f3a3d9"))
filtF <- file.path(antibiotica, "filtered", paste0(sample_names, "_F_filt.fastq.gz"))
# gemiddelde kwaliteitsscore per locatie
plotQualityProfile(forward_reads[1:10])
plotQualityProfile(reverse_reads[1:10])
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
#Treatment bij de x
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
ord.nmds.bray
stressplot(ord.nmds.bray)
library(vegan)
stressplot(ord.nmds.bray)
ord.nmds.bray
#Wilcoxon rank-sum test
rich <- estimate_richness(ps, measures = "Shannon")
rich
wilcox.observed <- pairwise.wilcox.test(rich$Shannon, sample_data(ps)$Treatment)
# P < 0,05, sprake van statistisch significant verschil  --> mixD5 0.0079
wilcox.observed
ord.nmds.bray
#Treatment bij de x
ps <- readRDS("D:/J2P3 Gezondheid, Ziekte en Microbioom/metagenomics/Verslag/ps.rds")
Biostrings::DNAStringSet(taxa_names(ps))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
ps
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
sample_data(ps)
otu_table(ps)[1:10, 1:10]
head(tax_table(ps))
head(refseq(ps))
#observed species
plot_richness(ps, x = "Treatment", measures = "Observed", color = "Treatment" )
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot()
#Wilcoxon rank-sum test
rich <- estimate_richness(ps, measures = "Shannon")
rich
wilcox.observed <- pairwise.wilcox.test(rich$Shannon, sample_data(ps)$Treatment)
# P < 0,05, sprake van statistisch significant verschil  --> mixD5 0.0079
wilcox.observed
# meerdere indexen tegelijk
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot()
# meerdere indexen tegelijk
library(ggplot2)
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot()
plot_richness(ps, x = "Treatment", measures = c("Observed", "Shannon", "Simpson"), color = "Treatment" ) +
geom_boxplot(color = "pink")
setwd("C:/Users/indys/OneDrive - NHL Stenden/J2P4 innovatievediagnostiek//Transcriptomics/Casus/Transcriptomics-Indy-J2P4/")
library(BiocManager)
library(Rsubread)
# Laad Rsamtools voor sorteren en indexeren
library(Rsamtools)
# voor werkcollege 2 ispaired end = TRUE en niet false
#annot.ext is de gtF van humaan esamble
# Je definieert een vector met namen van BAM-bestanden. Elke BAM bevat reads van een RNA-seq-experiment (bijv. behandeld vs. controle).
library(readr)
library(dplyr)
library(Rsamtools)
library(Rsubread)
library(EnhancedVolcano)
write.table(resultaten, file = 'ResultatenRA.csv', row.names = TRUE, col.names = TRUE)
allsamples <- c("ctrl19.BAM", "ctrl20.BAM", "ctrl28.BAM", "ctrl31.BAM", "RA79.BAM", "RA80.BAM", "RA86.BAM", "RA88.BAM")
head(count_matrix$annotation)
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/ncbi_dataset (2)/ncbi_dataset/data/GCA_000001405.29/genomic.gtf",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
allsamples <- c("ctrl19.BAM", "ctrl20.BAM", "ctrl28.BAM", "ctrl31.BAM", "RA79.BAM", "RA80.BAM", "RA86.BAM", "RA88.BAM")
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/ncbi_dataset (2)/ncbi_dataset/data/GCA_000001405.29/genomic.gtf",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
allsamples
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/ncbi_dataset (2)/ncbi_dataset/data/GCA_000001405.29/genomic.gtf",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
allsamples <- c("ctrl19.BAM", "ctrl20.BAM", "ctrl28.BAM", "ctrl31.BAM", "RA79.BAM", "RA80.BAM", "RA86.BAM", "RA88.BAM")
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/ncbi_dataset (2)/ncbi_dataset/data/GCA_000001405.29/genomic.gtf",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/Homo_sapiens.GRCh38.114.chr.gtf.gz",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
allsamples <- c("BAM bestanden/ctrl19.BAM", "BAM bestanden/ctrl20.BAM", "BAM bestanden/ctrl28.BAM", "BAM bestanden/ctrl31.BAM", "BAM bestanden/RA79.BAM", "BAM bestanden/RA80.BAM", "BAM bestanden/RA86.BAM", "BAM bestanden/RA88.BAM")
count_matrix <- featureCounts(
files = allsamples,
annot.ext = "GTF Humaan/Homo_sapiens.GRCh38.114.chr.gtf.gz",
isPairedEnd = TRUE,
isGTFAnnotationFile = TRUE,
GTF.attrType = "gene_id",
useMetaFeatures = TRUE
)
head(count_matrix$annotation)
head(count_matrix$counts)
# Bekijk eerst de structuur van het object
str(count_matrix)
# Haal alleen de matrix met tellingen eruit
counts <- count_matrix$counts
colnames(counts) <- c( "ctrl19.BAM", "ctrl20.BAM", "ctrl28.BAM", "ctrl31.BAM", "RA79.BAM", "RA80.BAM", "RA86.BAM", "RA88.BAM")
write.csv(counts, "bewerkt_countmatrix.csv")
countstest <- read.table("Ruwe Data/count_matrix.txt")
View(countstest)
treatment <- c("control", "control", "control","control", "RA", "RA", "RA", "RA")
treatment_table <- data.frame(treatment)
rownames(treatment_table) <- c('SRR4785819', 'SRR4785820', 'SRR4785828', 'SRR4785831', 'SRR4785979', 'SRR4785980', 'SRR4785986', 'SRR4785988')
library(DESeq2)
library(KEGGREST)
# Maak DESeqDataSet aan
dds <- DESeqDataSetFromMatrix(countData = round(countstest),
colData = treatment_table,
design = ~ treatment)
# Voer analyse uit
dds <- DESeq(dds)
resultaten <- results(dds)
write.table(resultaten, file = 'ResultatenRA.csv', row.names = TRUE, col.names = TRUE)
sum(resultaten$padj < 0.05 & resultaten$log2FoldChange > 1, na.rm = TRUE)
sum(resultaten$padj < 0.05 & resultaten$log2FoldChange < -1, na.rm = TRUE)
#bovenste is hoeveel genen meer in expressie en de onderste hoeveel genen minder expressie hebben
hoogste_fold_change <- resultaten[order(resultaten$log2FoldChange, decreasing = TRUE), ]
laagste_fold_change <- resultaten[order(resultaten$log2FoldChange, decreasing = FALSE), ]
laagste_p_waarde <- resultaten[order(resultaten$padj, decreasing = FALSE), ]
head(laagste_p_waarde)
library(EnhancedVolcano)
read.csv(laagste_p_waarde)
write.csv(laagste_p_waarde, file = "laagste_p_waarde.csv", row.names = FALSE)
EnhancedVolcano(resultaten,
lab = rownames(resultaten),
x = 'log2FoldChange',
y = 'padj')
# Alternatieve plot zonder p-waarde cutoff (alle genen zichtbaar)
EnhancedVolcano(resultaten,
lab = rownames(resultaten),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 0)
dev.copy(png, 'VolcanoplotWC.png',
width = 8,
height = 10,
units = 'in',
res = 500)
dev.off()
dev.copy(png, 'VolcanoplotRA.png',
width = 8,
height = 10,
units = 'in',
res = 500)
dev.off()
if (!requireNamespace("goseq", quietly = TRUE)) {
BiocManager::install("goseq")
}
a
a
a
library(goseq)
library(org.Hs.eg.db)
library(DESeq2)
# Stap 1: selecteer differentieel geÃ«xprimeerde genen (padj < 0.05)
res_sig <- resultaten[which(resultaten$padj < 0.05), ]
de_genes <- rownames(res_sig)
# Stap 2: Binaire vector maken van alle genen (1 = significant, 0 = niet significant)
all_genes <- rownames(resultaten)
gene_vector <- as.integer(all_genes %in% de_genes)
names(gene_vector) <- all_genes
# Stap 3: Bias data berekenen (lengtecorrectie)
# Hier nemen we aan dat je 'countstest' hebt gebruikt als count matrix
gene_lengths <- counttest$baseMean  # Als baseMean niet beschikbaar, gebruik alternatieve lengte-informatie
# Stap 3: Bias data berekenen (lengtecorrectie)
# Hier nemen we aan dat je 'countstest' hebt gebruikt als count matrix
gene_lengths <- countstest$baseMean  # Als baseMean niet beschikbaar, gebruik alternatieve lengte-informatie
names(gene_lengths) <- rownames(countstest)
str(count_matrix$annotation)
# Stap 3: Bias data berekenen (lengtecorrectie)
# Hier nemen we aan dat je 'countstest' hebt gebruikt als count matrix
gene_lengths <- countstest$baseMean  # Als baseMean niet beschikbaar, gebruik alternatieve lengte-informatie
names(gene_lengths) <- rownames(countstest)
annotation_df <- count_matrix$annotation
gene_lengths <- annotation_df$Length
names(gene_lengths) <- annotation_df$GeneID
# Maak een vector: 1 = differentieel geÃ«xprimeerd (padj < 0.05), 0 = niet
gene_vector <- as.integer(rownames(resultaten) %in% rownames(resultaten[resultaten$padj < 0.05 & !is.na(resultaten$padj), ]))
names(gene_vector) <- rownames(resultaten)
# Overlappende genen (alleen genen met lengte Ã©n testresultaat)
common_genes <- intersect(names(gene_vector), names(gene_lengths))
# Pas de vectoren aan op overlappende genen
gene_vector_filt <- gene_vector[common_genes]
gene_lengths_filt <- gene_lengths[common_genes]
# Voer goseq analyse uit
pwf <- nullp(gene_vector_filt, bias.data = gene_lengths_filt)
# Stap 1: selecteer differentieel geÃ«xprimeerde genen (padj < 0.05)
res_sig <- resultaten[which(resultaten$padj < 0.05), ]
de_genes <- rownames(res_sig)
# Stap 2: Binaire vector maken van alle genen (1 = significant, 0 = niet significant)
all_genes <- rownames(resultaten)
gene_vector <- as.integer(all_genes %in% de_genes)
names(gene_vector) <- all_genes
# Stap 3: Bias data berekenen (lengtecorrectie)
# Hier nemen we aan dat je 'countstest' hebt gebruikt als count matrix
gene_lengths <- countstest$baseMean  # Als baseMean niet beschikbaar, gebruik alternatieve lengte-informatie
names(gene_lengths) <- rownames(countstest)
str(countstest)
countstest <- read.table("Ruwe Data/count_matrix.txt", header = TRUE, row.names = 1, sep = "\t")
# Stap 3: Bias data berekenen (lengtecorrectie)
# Hier nemen we aan dat je 'countstest' hebt gebruikt als count matrix
gene_lengths <- countstest$baseMean  # Als baseMean niet beschikbaar, gebruik alternatieve lengte-informatie
names(gene_lengths) <- rownames(countstest)
# Genlengtes ophalen uit de annotation van featureCounts
gene_lengths <- count_matrix$annotation$Length
names(gene_lengths) <- count_matrix$annotation$GeneID  # â JUIST
# Stap 4: GO enrichment uitvoeren
pwf <- nullp(gene_vector, bias.data = gene_lengths)
# Stap 4: GO enrichment uitvoeren
common_genes <- intersect(names(gene_vector), names(gene_lengths))
gene_vector_filt <- gene_vector[common_genes]
gene_lengths_filt <- gene_lengths[common_genes]
gene_lengths_filt <- gene_lengths_filt[names(gene_vector_filt)]
pwf <- nullp(gene_vector_filt, bias.data = gene_lengths_filt)
# 1. Genen die in beide voorkomen
common_genes <- intersect(names(gene_vector), names(gene_lengths))
gene_vector_filt <- gene_vector[common_genes]
gene_lengths_filt <- gene_lengths[common_genes]
# 2. Verwijder NA's
valid <- !is.na(gene_vector_filt) & !is.na(gene_lengths_filt)
gene_vector_filt <- gene_vector_filt[valid]
gene_lengths_filt <-
pwf <- nullp(gene_vector, bias.data = gene_lengths)
# 1. Haal genlengtes uit count_matrix$annotation
gene_lengths <- count_matrix$annotation$Length
names(gene_lengths) <- count_matrix$annotation$GeneID
# 2. Maak binaire vector voor differentieel geÃ«xprimeerde genen
gene_vector <- as.integer(rownames(resultaten) %in% rownames(resultaten[resultaten$padj < 0.05 & !is.na(resultaten$padj), ]))
names(gene_vector) <- rownames(resultaten)
# 3. Houd alleen genen die in beide voorkomen
common_genes <- intersect(names(gene_vector), names(gene_lengths))
gene_vector <- gene_vector[common_genes]
gene_lengths <- gene_lengths[common_genes]
# 4. Verwijder NA's uit beide vectoren
valid <- !is.na(gene_vector) & !is.na(gene_lengths)
gene_vector <- gene_vector[valid]
gene_lengths <- gene_lengths[valid]
# 5. Zet beide in exact dezelfde volgorde
gene_lengths <- gene_lengths[names(gene_vector)]
# 6. GO enrichment uitvoeren
library(goseq)
pwf <- nullp(gene_vector, bias.data = gene_lengths)
library(goseq)
library(DESeq2)
library(dplyr)
library(tibble)
library(org.Hs.eg.db)  # Voor humane genen
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)  # Voor humane genen
library(GO.db)
# 1. Lees DE resultaten in (indien nog niet gedaan)
resultaten <- read.table("ResultatenRA.csv", header = TRUE, row.names = 1)
# 1. Lees DE resultaten in (indien nog niet gedaan)
resultaten <- read.table("Ruwe Data/Resultaten/ResultatenRA.csv", header = TRUE, row.names = 1)
# 2. Filter significante genen
sig_genen <- resultaten[!is.na(resultaten$padj) & resultaten$padj < 0.05, ]
sig_genen$gene_id <- rownames(sig_genen)
# 3. Maak vector met 1 (significant) of 0 (niet)
alle_genen <- rownames(resultaten)
sig_vector <- as.integer(alle_genen %in% rownames(sig_genen))
names(sig_vector) <- alle_genen
# 4. Genlengtes ophalen via org.Hs.eg.db (alternatief: zelf uploaden als bestand)
gene.df <- AnnotationDbi::select(org.Hs.eg.db,
keys = alle_genen,
keytype = "SYMBOL",
columns = c("ENTREZID", "SYMBOL"))
# Verwijder genen zonder Entrez ID (nodig voor goseq)
gene.df <- gene.df[!is.na(gene.df$ENTREZID), ]
sig_vector <- sig_vector[names(sig_vector) %in% gene.df$SYMBOL]
names(sig_vector) <- gene.df$ENTREZID[match(names(sig_vector), gene.df$SYMBOL)]
# 5. Bias data genereren (vereist voor length bias correctie)
pwf <- nullp(sig_vector, bias.data = NULL, plot.fit = FALSE)
pwf <- nullp(sig_vector,
genome = "hg38",      # of "hg19" als je oudere genannotatie hebt
id = "entrez",        # of "gene.symbol" als je SYMBOLs gebruikt
plot.fit = FALSE)
library(org.Hs.eg.db)
gene.df <- AnnotationDbi::select(org.Hs.eg.db,
keys = names(sig_vector),
keytype = "SYMBOL",
columns = c("ENTREZID"))
# 6. GO enrichment uitvoeren
GO.wall <- goseq(pwf,
gene2cat = org.Hs.egGO,
method = "Hypergeometric")
# 5. Bias data genereren (vereist voor length bias correctie)
pwf <- nullp(sig_vector, bias.data = NULL, plot.fit = FALSE)
# Stap 1: Laad je DESeq2 resultaten
resultaten <- read.csv("Ruwe Data/Resultaten/ResultatenRA.csv", row.names = 1)
# Stap 2: Selecteer significante genen (padj < 0.05)
resultaten$significant <- as.integer(resultaten$padj < 0.05 & !is.na(resultaten$padj))
# ð¥ 1. Laad DESeq2 resultaten
resultaten <- read.csv("ResultatenRA.csv", row.names = 1)
# ð¥ 1. Laad DESeq2 resultaten
resultaten <- read.csv("Ruwe Data/Resultaten/ResultatenRA.csv", row.names = 1)
# ð§ª 2. Selecteer top 500 genen met laagste p-value
top500 <- resultaten[order(resultaten$pvalue), ][1:500, ]
top500$significant <- 1
# ð§ª 2. Selecteer top 500 genen met laagste p-value
top500 <- resultaten[order(resultaten$pvalue), ][1:500, ]
# ð§ª 2. Selecteer top 500 genen met laagste p-value
top500 <- resultaten[order(resultaten$pvalue), ][2:500, ]
# Stap 3: Lees DESeq2 resultaten in
resultaten <- read.csv("Ruwe Data/Resultaten/ResultatenRA.csv", row.names = 1)
# Stap 4: Zorg dat de p-value kolom aanwezig is
if (!"pvalue" %in% colnames(resultaten)) {
stop("Kolom 'pvalue' ontbreekt in ResultatenRA.csv")
}
if (!"pvalue" %in% colnames(resultaten)) {
stop("Kolom 'pvalue' ontbreekt in ResultatenRA.csv")
}
resultaten <- read.csv("ResultatenRA.csv", row.names = 1)
Error in file(file, "rt") : cannot open the connection
head(resultaten)
# Stap 3: Lees DESeq2 resultaten in
resultaten <- read.csv("Ruwe Data/Resultaten/ResultatenRA.csv", row.names = 1)
head(resultaten)
resultaten <- results(dds)
head(resultaten)
write.csv(resultaten, file = 'ResultatenRA.csv', row.names = TRUE, col.names = TRUE)
# Stap 4: Zorg dat de p-value kolom aanwezig is
if (!"pvalue" %in% colnames(resultaten)) {
stop("Kolom 'pvalue' ontbreekt in ResultatenRA.csv")
}
# Stap 3: Lees DESeq2 resultaten in
resultaten <- read.csv("Ruwe Data/Resultaten/ResultatenRA.csv", row.names = 1)
head(resultaten)
resultaten <- results(dds)
write.csv(resultaten, 'ResultatenRA.csv')
# Stap 3: Lees DESeq2 resultaten in
resultaten <- read.csv("ResultatenRA.csv", row.names = 1)
head(resultaten)
getwd()
write.csv(resultaten, 'Ruwe Data/Resultaten/ResultatenRA.csv')
# Stap 5: Selecteer top 500 genen met laagste p-value
top500 <- resultaten[order(resultaten$pvalue), ][1:500, , drop = FALSE]
top500$significant <- 1
top500
# Stap 6: Alle genen labelen (1 = top500, 0 = overig)
resultaten$significant <- 0
resultaten[rownames(top500), "significant"] <- 1
head(resultaten)
# Stap 7: Zet gen SYMBOLs in kolom en converteer naar Entrez ID
resultaten$SYMBOL <- rownames(resultaten)
head(resultaten)
mapping <- AnnotationDbi::select(org.Hs.eg.db,
keys = resultaten$SYMBOL,
keytype = "SYMBOL",
columns = "ENTREZID")
head(mapping)
# Stap 8: Merge en filter alleen genen met Entrez ID
resultaten_mapped <- merge(resultaten, mapping, by = "SYMBOL")
resultaten_mapped <- resultaten_mapped[!is.na(resultaten_mapped$ENTREZID), ]
head(resultaten_mapped)
# Stap 9: Maak named vector van significantie (1 of 0) met Entrez ID's
gene_vector <- resultaten_mapped$significant
names(gene_vector) <- resultaten_mapped$ENTREZID
head(gene_vector)
gene_vector
# Stap 10: Null model genereren (voor bias correctie)
pwf <- nullp(gene_vector, genome = "hg38", id = "entrez", plot.fit = FALSE)
# Stap 10: Null model genereren (voor bias correctie)
pwf <- nullp(gene_vector, genome = "hg38", id = "SYMBOL", plot.fit = FALSE)
# TEST
# data
head(resultaten)
# TEST
# data
resultaten <- read.csv("Ruwe Data/Resultaten/ResultatenRA.csv", row.names = 1)
head(resultaten)
sig <- resultaten %>%
filter(padj < 0.05)
head(sig)
sig <- rownames(sig)
sig
all <- rownames(resultaten)
all
gene.vector <- as.integer(all%in%sig)
gene.vector
names(gene.vector) <- all
gene.vector
supportedOrganisms()
pwf <- nullp(gene.vector, "hg19", "geneSymbol")
GO.wall = goseq(pwf, "hg19", "geneSymbol")
class(GO.wall)
head(GO.wall)
nrow(GO.wall)
GO.results = goseq(pwf, "hg19", "geneSymbol")
GO.results %>%
top_n(10, wt = -over_represented_pvalue) %>%
mutate(hitsPerc = numDEInCat*100/numInCat) %>%
ggplot(aes(x=hitsPerc,
y = term,
colour = over_represented_pvalue,
size = numDEInCat)) +
geom_point() +
expand_limits(x =0)+
labs(x = "hits(%)", y = "GO term", colour = "p value", size = "count")
library(GO.db)
GOTERM[ [GO.results$category[1]]]
GOTERM [GO.results$category[1]]
GOTERM
GOTERM
GO.wall = goseq(pwf, "hg19", "geneSymbol")
enriched.GO=GO.wall$category[GO.wall$over_represented_pvalue<.05]
#NOTE: They recommend using a more stringent multiple testing corrected p value here
capture.output(for(go in enriched.GO[1:258]) { print(GOTERM[[go]])
cat("--------------------------------------\n")
}
, file="SigGo.txt")
less SigGo.txt
#KEGG PATHWAY ANALYSE
library(pathview)
#KEGG PATHWAY ANALYSE
if (!requireNamespace("pathview", quietly = TRUE)) {
BiocManager::install("pathview")
}
library(pathview)
resultatenRA[1] <- NULL
resultaten[1] <- NULL
resultaten[2:5] <- NULL
pathview(
gene.data = gene_vector,
pathway.id = "03260",  # KEGG ID voor Biofilm formation â E. coli
species = "hgn",          # 'eco' = E. coli in KEGG
gene.idtype = "KEGG",     # Geef aan dat het KEGG-ID's zijn
limit = list(gene = 5)    # Kleurbereik voor log2FC van -5 tot +5
)
pathview(
gene.data = gene_vector,
pathway.id = "03260",  # KEGG ID voor virion - human immunodeficiency virus
species = "hsa",          # 'hgn' = human genome
gene.idtype = "ENTREZ",     # Geef aan dat het KEGG-ID's zijn
limit = list(gene = 5)    # Kleurbereik voor log2FC van -5 tot +5
)
